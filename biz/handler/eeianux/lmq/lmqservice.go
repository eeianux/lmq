// Code generated by hertz generator.

package lmq

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	lmq "github.com/eeianux/lmq/biz/model/eeianux/lmq"
	"github.com/eeianux/lmq/biz/service"
	"github.com/eeianux/lmq/utils"
)

// Ping .
// @router /ping [POST]
func Ping(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lmq.PingReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := service.PingService{}.Run(ctx, &req)
	if err != nil {
		if resp == nil {
			resp = &lmq.PingResp{}
		}
		resp.BaseResp = utils.BuildResp(err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// Produce .
// @router /produce [POST]
func Produce(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lmq.ProduceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(lmq.ProduceResp)

	c.JSON(consts.StatusOK, resp)
}

// Consume .
// @router /consume [POST]
func Consume(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lmq.ConsumeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(lmq.ConsumeResp)

	c.JSON(consts.StatusOK, resp)
}
